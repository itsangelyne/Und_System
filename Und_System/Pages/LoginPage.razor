@page "/"
@using Und_System.Data
@using Und_System.Services
@inject NavigationManager NavigationManager
@inject CGLUnderwritingUserService CGLUnderwritingUserService

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
	<div class="row w-100 shadow rounded" style="max-width: 1000px; overflow: hidden; background: white;">
		<div class="col-md-6 p-0">
			<img src="assets/countrybankers.jpg" alt="Country Bankers" class="img-fluid h-100 w-100" style="object-fit: cover;" />
		</div>
		<div class="col-md-6 d-flex align-items-center justify-content-center">
			<div class="login-container p-4">
				<img src="assets/cbliclogo.png" alt="Logo" style="height: 50px;" />

				<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
					<DataAnnotationsValidator />
					<div class="mb-3 row">
						<label for="username" class="col-sm-3 col-form-label text-nowrap" id="usernamelabel">Username</label>
						<div>
							<InputText id="username" class="@($"form-control {(showLoginError ? "is-invalid" : "")}")" @bind-Value="loginModel.Username"
									   bind-value:event="oninput" @oninput="ClearUsernameError" />
							<ValidationMessage For="@(() => loginModel.Username)" />
						</div>
					</div>

					<div class="mb-3 row">
						<label for="password" class="col-sm-3 col-form-label" id="passlabel">Password</label>
						<div class="col-sm-12 position-relative">
							<div class="input-group">
								<InputText id="password" type="@(!showPassword ? "password" : "text")" class="@($"form-control {(showLoginError ? "is-invalid" : "")}")" @bind-Value="loginModel.Password"
										   bind-value:event="oninput" @oninput="ClearPasswordError" />
								<span class="input-group-text password-toggle-icon" @onclick="TogglePasswordVisibility" style="cursor: pointer;">
									<i class="@(!showPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
								</span>
							</div>
							<ValidationMessage For="@(() => loginModel.Password)" />
						</div>
						@if (showLoginError)
						{
							<div class="mt-2" style="font-size: 16px; font-weight:400; color:red">
								@loginErrorMessage
							</div>
						}
					</div>
					<div class="d-flex flex-column flex-sm-row justify-content-start mt-4">
						<button type="submit" class="btn btn-login">
							<i class="oi oi-account-login"></i> Login
						</button>
					</div>
					<hr style="height:1px!important;z-index: 100;color: #326e32;" />
					<div class="text-center">
						<p class="fst-italic text-center m-1 mt-3" @onclick="LostPassModal" style="font-size:14px!important; padding-right:10px!important;font-weight:500;" id="forgotpass">Forget Password?</p>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@if (isLostPassword)
{
	<div class="modal show" style="background: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: flex; align-items: center; justify-content: center; z-index:9999!important;">
		<div class="modal-dialog">
			<div class="modal-content" style="width:30rem;">
				<div class="modal-header">
					<h5 class="text-center fw-bold " style="color: #5d835c">RESET PASSWORD</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<label for="emailadd" class="form-label">Email Address</label>
					<input type="email" class="form-control form-control-sm" id="emailadd">
				</div>
				<div class="modal-footer">
					<button class="btn btn-outline-primary" id="resetbtn">Reset</button>
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Close</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private string loginErrorMessage = string.Empty;
	public class LoginModel
	{
		[Required(ErrorMessage = "Username is required.")]
		public string Username { get; set; }

		[Required(ErrorMessage = "Password is required.")]
		public string Password { get; set; }
	}

	private LoginModel loginModel = new();
	private bool showLoginError = false;
	private bool showPassword = false;
	private bool isLostPassword = false;

	private async Task HandleLogin()
	{
		showLoginError = false;
		loginErrorMessage = string.Empty;

		var user = await CGLUnderwritingUserService.GetUserByUsernameAsync(loginModel.Username);

		if (user == null)
		{
			loginErrorMessage = "This user doesn't exist within the system.";
			showLoginError = true;
		}
		else if (user.Password != loginModel.Password)
		{
			loginErrorMessage = "Incorrect password.";
			showLoginError = true;
		}
		else
		{
			NavigationManager.NavigateTo("/lineofbusiness", true);
		}
	}

	private void ClearUsernameError()
	{
		if (!string.IsNullOrWhiteSpace(loginModel.Username))
		{
			showLoginError = false;
			loginErrorMessage = string.Empty;
		}
	}

	private void ClearPasswordError()
	{
		if (!string.IsNullOrWhiteSpace(loginModel.Password))
		{
			showLoginError = false;
			loginErrorMessage = string.Empty;
		}
	}

	private void TogglePasswordVisibility()
	{
		showPassword = !showPassword;
	}

	private void LostPassModal()
	{
		isLostPassword = true;
	}

	private void CloseModal()
	{
		isLostPassword = false;
	}
}
