@page "/shortterm/approvedlist"
@using Microsoft.EntityFrameworkCore;
@using Und_System.Context;
@using Und_System.Data;
@using Und_System.Services;
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager
@inject CGLInsuredService CGLInsuredService
@inject CGLPolicyHolderServices CGLPolicyHolderServices
@inject StateService StateService
@inject CGLCreditDebitServices CGLCreditDebitServices
@inject CGLCoverageService CGLCoverageService
@inject CGLSubstandardRatingService CGLSubstandardRatingService
@inject CGLUndStatusService CGLUndStatusService
@inject CGLHealthQuestionsService CGLHealthQuestionsService
@inject CGLHealthAnswerService CGLHealthAnswerService
@inject CGLBeneficiaryService CGLBeneficiaryService
@inject IJSRuntime JS

<h1><b>APPROVED APPLICATIONS</b></h1>
<hr />
<div class="container my-4 p-4 rounded" style="background-color:#FFFFFF; max-width:100%; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
	<h3 class="text-center fw-bold text-decoration-underline">SHORT TERM</h3>
	<h4 class="text-center fw-bold mb-0">Bank: @StateService.SelectedBankName</h4>
	<div class="card-body">
		<div class="row justify-content-evenly">
			<div class="col-md-4 mb-3 d-flex mb-3 align-items-center">
				<label for="searchbar" class="form-label me-2 fw-bold mb-0">Search:</label>
				<input type="text" class="form-control" placeholder="Search..." id="searchbar" @bind="searchText" @bind:event="oninput" />
			</div>
			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="amountDropdown" class="me-2 fw-bold" style="white-space: nowrap; min-width: 140px;">Filter by Amount:</label>
				<select class="form-control flex-grow-1" id="amountDropdown" @onchange="OnAmountChanged">
					<option value="">Select Amount</option>
					<option value="Below100K">Below 100K</option>
					<option value="Above100K">100K and Above</option>
					<option value="Above300K">Above 300K</option>
				</select>
			</div>

			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="yearDropdown" class="me-1 fw-bold" style="white-space: nowrap; min-width: 120px;">Filter by Year:</label>
				<select class="form-control flex-grow-1" id="yearDropdown" @onchange="OnYearChanged">
					<option value="">Select Year</option>
					@foreach (var year in years)
					{
						<option value="@year">@year</option>
					}
				</select>
			</div>
		</div>
		<div class="table-responsive">
			<table class="table table-bordered">
				<thead class="text-white" style="background-color: #5d835c;">
					<tr>
						<th class="text-center">Last Name</th>
						<th class="text-center">First Name</th>
						<th class="text-center">Middle Name</th>
						<th class="text-center">Date of Birth</th>
						<th class="text-center">Effectivity</th>
						<th class="text-center">Termination</th>
						<th class="text-center">Action</th>
					</tr>
				</thead>
				<tbody>
					@if (insuredDetailsList != null && insuredDetailsList.Count > 0)
					{
						foreach (var detail in insuredDetailsList)
						{
							var insured = detail.Insured;
							var coverage = detail.Coverage;
							var undStatus = detail.UndStatus;

							<tr>
								<td class="text-center">@insured?.Last_Name</td>
								<td class="text-center">@insured?.First_Name</td>
								<td class="text-center">@insured?.Middle_Name</td>
								<td class="text-center">@insured?.Date_Of_Birth.ToString("yyyy-MM-dd")</td>
								<td class="text-center">@coverage?.Effective_Date.ToString("yyyy-MM-dd")</td>
								<td class="text-center">@coverage?.Termination_Date.ToString("yyyy-MM-dd")</td>
								<td class="text-center">
									<button class="btn btn-outline-success btn-sm" @onclick="() => ViewDetails(insured)">Underwrite</button>
									@* <button class="btn btn-outline-success btn-sm" @onclick="() => ViewIDInModal(insured)">View ID</button> *@
									<button class="btn btn-outline-success btn-sm" @onclick="() => ViewLoanHistory(insured)">History</button>
								</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="7" class="text-center text-danger fw-bold">No Approved Applications Found</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@if (isModalVisible)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-xl">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title"><b>Borrower's Details: </b></h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<ul class="nav nav-tabs" id="myTab" role="tablist">
						<li class="nav-item" role="presentation">
							<a class="nav-link active" id="coverage-tab" data-bs-toggle="tab" href="#coverage" role="tab" aria-controls="coverage" aria-selected="true">Coverage Details</a>
						</li>
						<li class="nav-item" role="presentation">
							<a class="nav-link" id="other-details-tab" data-bs-toggle="tab" href="#other-details" role="tab" aria-controls="other-details" aria-selected="false">Other Details</a>
						</li>
					</ul>
					@* TAB 1 FOR COVERAGE DETAILS *@
					<div class="tab-content" id="myTabContent">
						<div class="tab-pane fade show active" id="coverage" role="tabpanel" aria-labelledby="coverage-tab">
							<form>
								<div class="border rounded p-3 mb-3">
									<div class="border rounded p-3 mb-3">
										<div class="col-md mb-3">
											<label for="bankName" class="form-label">Name of Bank</label>
											<input type="text" class="form-control" id="bankName" value="@policyHolder?.Policy_Holder_Name" readonly />
										</div>
										<div class="row">
											<div class="col-md-3 mb-3">
												<label for="bankBranch" class="form-label">Branch</label>
												<input type="text" class="form-control" id="bankBranch" value="@policyHolder?.Bank_Level" readonly />
											</div>
											<div class="col-md-9 mb-3">
												<label for="bankAddress" class="form-label">Address</label>
												<input type="text" class="form-control" id="bankAddress" value="@policyHolder?.Bank_Address" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="ORDate" class="form-label">OR Date</label>
												<input type="number" class="form-control" id="ORDate" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="ORNumber" class="form-label">OR Number</label>
												<input type="number" class="form-control" id="ORNumber" readonly />
											</div>
										</div>
									</div>

									<div class="border rounded p-3 mb-3">
										<div class="row">
											<div class="col-md-4 mb-3">
												<label for="dob" class="form-label">Date of Birth</label>
												<input type="date" class="form-control" id="dob" @bind="selectedInsured.Date_Of_Birth" readonly="@(!isRemarksEditable)" />
											</div>
											<div class="col-md-1 mb-3">
												<label for="age" class="form-label">Age</label>
												<input type="number" class="form-control" id="age" @bind="selectedInsured.Age" readonly />
											</div>
											<div class="row">
												<div class="col-md-4 mb-3">
													<label for="lastName" class="form-label">Last Name</label>
													<input type="text" class="form-control" id="lastName" @bind="selectedInsured.Last_Name" readonly="@(!isRemarksEditable)" />
												</div>
												<div class="col-md-4 mb-3">
													<label for="firstName" class="form-label">First Name</label>
													<input type="text" class="form-control" id="firstName" @bind="selectedInsured.First_Name" readonly="@(!isRemarksEditable)" />
												</div>
												<div class="col-md-3 mb-3">
													<label for="middleName" class="form-label">Middle Name</label>
													<input type="text" class="form-control" id="middleName" @bind="selectedInsured.Middle_Name" readonly="@(!isRemarksEditable)" />
												</div>
												<div class="col-sm-1 mb-3">
													<label for="suffix" class="form-label">Suffix</label>
													<input type="text" class="form-control" id="suffix" @bind="selectedInsured.Suffix" readonly="@(!isRemarksEditable)" />
												</div>
											</div>
										</div>
									</div>

									<div class="border rounded p-3 mb-3">
										<div class="row">
											<div class="col-md-4 mb-3">
												<label for="loan" class="form-label">Amount of Loan</label>
												<input type="text" class="form-control" id="loan" value="@selectedCoverage?.Amount_Of_Insured" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="term" class="form-label">Loan Term</label>
												<input type="text" class="form-control" id="term" @bind="selectedCoverage.Term_Of_Loan" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="effective" class="form-label">Effectivity Date</label>
												<input type="date" class="form-control" id="effective" @bind="selectedCoverage.Effective_Date" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="dueDate" class="form-label">Due Date</label>
												<input type="date" class="form-control" id="dueDate" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="termination" class="form-label">Termination Date</label>
												<input type="date" class="form-control" id="termination" @bind="selectedCoverage.Termination_Date" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="mop" class="form-label">Mode of Payment</label>
												<input type="text" class="form-control" id="mop" @bind="selectedCoverage.Mode_Of_Payment" readonly />
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col-md-5 mb-3">
											<div class="border rounded p-3 mb-3">
												<div class="col-md mb-3">
													<label for="DCHS" class="form-label">DCHS Number</label>
													<input type="text" class="form-control" id="DCHS" value="@selectedInsured?.DCHS" readonly />
												</div>
												<div class="col-md mb-3">
													<label for="prem" class="form-label">Premium</label>
													<input type="number" class="form-control" id="prem" @bind="selectedCoverage.Premium" readonly />
												</div>
												<div class="col-md mb-3">
													<label for="rider" class="form-label">Rider</label>
													<input type="text" class="form-control" id="rider" value="@selectedCoverage.Rider" readonly />
												</div>
											</div>
										</div>
										<div class="col-md mb-3">
											<div class="border rounded p-3 mb-3">
												<div class="col-md mb-3">
													<div class="row">
														<div class="col-md mb-3">
															<label for="status" class="form-label">Underwriting Status</label>
															<input type="text" class="form-control" id="status" value="@status?.Und_Status" readonly />
														</div>
													</div>
												</div>
												<div class="col-md mb-3">
													<div class="col-md mb-3">
														<label for="remarks" class="form-label">Remarks</label>
														<textarea class="form-control" rows="4" cols="50" style="resize:none;" id="remarks" @bind="status.Remarks" readonly></textarea>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="rounded mb-3">
										<div class="table-responsive">
											<table class="table table-bordered mb-0">
												<thead class="text-white" style="background-color:#5d835c">
													<tr>
														<th class="text-center">Illness</th>
														<th class="text-center">Regular Age</th>
														<th class="text-center">Overage</th>
													</tr>
												</thead>
												<tbody>
													@if (substandardRatings != null && substandardRatings.Count > 0)
													{
														@foreach (var rating in substandardRatings)
														{
															<tr>
																<td>
																	<input type="text" class="form-control" value="@rating.Illness_Name" readonly />
																</td>
																<td class="text-center" style="width:20%;">
																	<input type="text" class="form-control text-center" value="@rating.Regular_Age" readonly />
																</td>
																<td class="text-center" style="width:20%;">
																	<input type="text" class="form-control text-center" value="@rating.Overage" readonly />
																</td>
															</tr>
														}
													}
													else
													{
														<tr>
															<td colspan="3" class="text-center text-danger">No Illness Declared</td>
														</tr>
													}
												</tbody>
											</table>
										</div>
									</div>

									<table class="table table-borderless mb-0">
										<thead class="text-white" style="background-color:#5d835c">
											<tr>
												<th class="text-center" style="width: 85px;">No.</th>
												<th class="text-center" style="width:auto;">Question</th>
												<th class="text-center" style="width: 150px;">Answer</th>
											</tr>
										</thead>
										<tbody>
											@for (int i = 0; i < healthQuestions.Count; i++)
											{
												var question = healthQuestions[i];
												if (question.Status == "display")
												{
													var answer = healthAnswers.FirstOrDefault(a => a.ID_Health_Question == question.ID);

													if (string.IsNullOrEmpty(question.InputType))
													{
														<tr>
															<td colspan="3">
																<p class="fw-normal justify-content-center mb-0">@question.Question</p>
																@if (answer != null && answer.Input_Type == "No")
																{
																	<textarea class="form-control" readonly style="height: 100px; resize: none;">@answer.Remarks</textarea>
																}
															</td>
														</tr>
													}
													else
													{
														<tr>
															<td>
																<input type="text" class="form-control" value="@question.NO" readonly style="width: 80px; text-align: center;" />
															</td>
															<td>
																@if (question.InputType == "textarea")
																{
																	<textarea style="word-wrap: break-word; white-space: normal;" class="fw-bolder" readonly>@question.Question</textarea>
																}
																else if (question.InputType == "date")
																{
																	<textarea style="word-wrap: break-word; white-space: normal;" class="form-control fw-bold" value="@question.Question" readonly />
																}
																else
																{
																	<input type="text" class="form-control" value="@question.Question" readonly />
																}
															</td>
															<td>
																@if (answer != null)
																{
																	if (question.NO.ToString().Contains("."))
																	{
																		<input type="text" class="form-control text-center" value="@answer.Answer" readonly style="width: 140px;" />
																	}
																	else
																	{
																		if (answer.Input_Type == "No")
																		{
																			<input type="text" class="form-control text-center" value="@answer.Input_Type" readonly style="width: 140px;" />
																		}
																		else
																		{
																			<input type="text" class="form-control text-center" value="@answer.Input_Type" readonly style="width: 140px;" />
																		}
																	}
																}
																else
																{
																	<input type="text" class="form-control" value="No Answer" readonly />
																}
															</td>
														</tr>

														@if (answer != null && answer.Input_Type == "No")
														{
															<tr>
																<td colspan="3">
																	<textarea class="form-control" readonly style="height: 100px; resize:none;">@answer.Remarks</textarea>
																</td>
															</tr>
														}
													}
												}
											}
										</tbody>
									</table>
								</div>
							</form>
						</div>

						@* TAB 2 FOR OTHER DETAILS (PERSONAL) *@
						<div class="tab-pane fade" id="other-details" role="tabpanel" aria-labelledby="other-details-tab">
							<form>
								<div class="border rounded p-3 mb-3">
									<div class="border rounded p-3 mb-3">
										<div class="row">
											<div class="col-md-8">
												<label for="address" class="form-label">Address</label>
												<input type="text" class="form-control" id="address" value="@selectedInsured?.Address" readonly />
											</div>
											<div class="col-md-2 mb-2">
												<label for="civil" class="form-label">Civil Status</label>
												<input type="text" class="form-control" id="civil" value="@selectedInsured?.Civil_Status" readonly />
											</div>
											<div class="col-md-2 mb-2">
												<label for="gender" class="form-label">Gender</label>
												<input type="text" class="form-control" id="gender" value="@selectedInsured?.Gender" readonly />
											</div>
											<div class="col-sm-1 mb-2">
												<label for="height" class="form-label">Height</label>
												<input type="text" class="form-control" id="height" value="@selectedInsured?.Height" readonly />
											</div>
											<div class="col-sm-1 mb-2">
												<label for="weight" class="form-label">Weight</label>
												<input type="text" class="form-control" id="weight" value="@selectedInsured?.Weight" readonly />
											</div>

											<div class="col-md-3 mb-3">
												<label for="contact" class="form-label">Contact Number</label>
												<input type="number" class="form-control" id="contact" value="@selectedInsured?.Contact_Number" readonly />
											</div>
											<div class="col-md-7 mb-3">
												<label for="email" class="form-label">Email Address</label>
												<input type="text" class="form-control" id="email" value="@selectedInsured?.Email_Address" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="pob" class="form-label">Place of Birth</label>
												<input type="text" class="form-control" id="pob" value="@selectedInsured?.Place_Of_Birth" readonly />
											</div>
											<div class="col-md-3 mb-3">
												<label for="nationality" class="form-label">Nationality</label>
												<input type="text" class="form-control" id="nationality" value="@selectedInsured?.Nationality" readonly />
											</div>
											<div class="col-md-5 mb-3">
												<label for="govno" class="form-label">Gov Number (TIN/SSS/GSIS)</label>
												<input type="number" class="form-control" id="govno" value="@selectedInsured?.TIN_SSS_GSIS_NO" readonly />
											</div>
										</div>
									</div>
									<div class="border rounded p-3 mb-3">
										<div class="row">
											<div class="col-md-6 mb-3">
												<label for="source" class="form-label">Source of Funds</label>
												<input type="text" class="form-control" id="source" value="@selectedInsured?.Source_Of_Funds" readonly />
											</div>
											<div class="col-md-6 mb-3">
												<label for="nature" class="form-label">Nature of Self-Employment</label>
												<input type="text" class="form-control" id="nature" value="@selectedInsured?.Nature_of_Self_Employment_Business" readonly />
											</div>
											<div class="col-md-8 mb-3">
												<label for="business" class="form-label">Address of Employer</label>
												<input type="text" class="form-control" id="business" value="@selectedInsured?.Address_Of_Business_or_Employer" readonly />
											</div>
											<div class="col-md-4 mb-3">
												<label for="occupation" class="form-label">Occu pation</label>
												<input type="text" class="form-control" id="occupation" value="@selectedInsured?.Occupation_And_Livelihood" readonly />
											</div>
										</div>
									</div>

									<div class="rounded mb-3">
										<div class="table-responsive" style="overflow-x: auto">
											<table class="table table-bordered mb-0">
												<thead class="text-white" style="background-color:#5d835c">
													<tr>
														<th class="text-center">Full Name</th>
														<th class="text-center">Age</th>
														<th class="text-center">Relation to Insured</th>
													</tr>
												</thead>
												<tbody>
													@if (beneficiaries != null && beneficiaries.Count > 0)
													{
														@foreach (var beneficiary in beneficiaries)
														{
															<tr>
																<td class="text-center">
																	<input type="text" class="form-control text-center" value="@beneficiary.Full_Name" readonly />
																</td>
																<td class="text-center">
																	<input type="text" class="form-control text-center" value="@beneficiary.Age" readonly />
																</td>
																<td class="text-center">
																	<input type="text" class="form-control text-center" value="@beneficiary.Relation_To_The_Insured" readonly />
																</td>
															</tr>
														}
													}
													else
													{
														<tr>
															<td colspan="3" class="text-center text-danger">No Beneficiaries Found</td>
														</tr>
													}
												</tbody>
											</table>
										</div>
									</div>
									<div class="border rounded d-flex justify-content-center align-items-center" style="min-height: 300px;">
										<img src="@($"{NavigationManager.BaseUri}validid/{selectedInsured?.Image}")" class="img-fluid" alt="Insured ID" style="max-width: 250px; max-height: 250px;" />
									</div>
								</div>
							</form>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Close</button>
				</div>
			</div>
		</div>
	</div>
}

<!--Valid ID Modal-->
@if (isImageModalVisible)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Valid ID</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body text-center">
					<img src="@imageUrl" class="img-fluid" alt="Valid ID Image" />
				</div>
			</div>
		</div>
	</div>
}

<!--Loan History Modal-->
@if (showLoanHistoryModal)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-xl">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Loan History</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<div class="table-responsive">
						<table class="table table-bordered">
							<thead class="text-white" style="background-color: #5d835c;">
								<tr>
									<th>Full Name</th>
									<th>Date of Birth</th>
									<th>Amount of Loan</th>
									<th>Status</th>
									<th>Name of Bank</th>
									<th>Valid ID</th>
								</tr>
							</thead>
							<tbody>
								@if (loanHistoryList != null && loanHistoryList.Count > 0)
								{
									@foreach (var loan in loanHistoryList)
									{
										<tr class="align-content-center">
											<td class="text-center"><b>@loan.LastName</b>, @loan.FirstName @loan.MiddleName</td>
											<td class="text-center">@loan.DateOfBirth.ToString("yyyy-MM-dd")</td>
											<td class="text-center">@loan.AmountOfLoan</td>
											<td class="text-center">@loan.Status</td>
											<td class="text-center">@loan.BankName</td>
											<td class="text-center position-relative">
												<img src="@loan.ImageUrl"
													 class="img-fluid"
													 alt="Insured ID"
													 style="max-width: 100px; max-height: 100px; cursor: zoom-in;"
													 @onclick="@(() => ShowZoomedImage(loan.ImageUrl))" />
											</td>
										</tr>
									}
								}
								else
								{
									<tr>
										<td colspan="6" class="text-center text-danger fw-bold">No Loan History available</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@if (showZoomedImage && zoomedImageUrl != null)
{
	<div class="zoom-overlay">
		<img src="@zoomedImageUrl" class="zoomed-img" alt="Zoomed ID" @onclick="CloseModal" style="cursor: zoom-out;" />
	</div>
}


@code {
	public class InsuredDetailView
	{
		public CGLInsured? Insured { get; set; }
		public CGLCoverage? Coverage { get; set; }
		public CGL_UndStatus? UndStatus { get; set; }
	}

	public class LoanHistory
	{
		public required string LastName { get; set; }
		public required string FirstName { get; set; }
		public string? MiddleName { get; set; }
		public DateTime DateOfBirth { get; set; }
		public double AmountOfLoan { get; set; }
		public required string Status { get; set; }
		public required string BankName { get; set; }
		public string? ImageUrl { get; set; }
	}

	private int? selectedYear;
	private string? currentAction;
	private string? imageUrl;
	private bool isEditing = false;
	private int? expandedRowId = null;
	private bool isConfirmationVisible = false;
	private bool isRemarksEditable = false;
	private bool showLoanHistoryModal = false;
	private bool showZoomedImage = false;
	private string zoomedImageUrl;

	private bool isImageModalVisible = false;
	private List<int> years = new List<int>();
	private List<CGLCreditDebit> releaseList = new List<CGLCreditDebit>();
	private List<InsuredDetailView> insuredDetailsList = new List<InsuredDetailView>();
	private List<CGL_Substandard_Rating> substandardRatings = new();
	private List<CGL_Health_Question> healthQuestions = new();
	private List<CGL_Health_Answer> healthAnswers = new();
	private List<CGL_Beneficiary> beneficiaries = new();
	private List<LoanHistory> loanHistoryList = new List<LoanHistory>();
	private List<InsuredDetailView> originalInsuredDetailsList = new List<InsuredDetailView>();

	private string? selectedAmountFilter;
	private bool isModalVisible = false;
	private CGLInsured? selectedInsured;
	private CGLCoverage? selectedCoverage;
	private CGL_UndStatus? status;
	private CGLPolicyHolder? policyHolder;
	private string _searchText = string.Empty;
	private string searchText
	{
		get => _searchText;
		set
		{
			if (_searchText != value)
			{
				_searchText = value;
				ApplyFilters();
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		int currentYear = DateTime.Now.Year;
		years = Enumerable.Range(2000, currentYear - 2000 + 1).ToList();
		await LoadCreditDebitData();
	}

	//Year Filter
	private async Task OnYearChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int year))
		{
			selectedYear = year;
		}
		else
		{
			selectedYear = null;
		}

		await LoadCreditDebitData();
	}

	//Amount Filter
	private async Task OnAmountChanged(ChangeEventArgs e)
	{
		selectedAmountFilter = e.Value?.ToString();
		await LoadCreditDebitData();
	}

	private async Task LoadCreditDebitData()
	{
		int? selectedPolicyHolderIdNullable = StateService.SelectedBankId;

		if (selectedPolicyHolderIdNullable.HasValue)
		{
			int selectedPolicyHolderId = selectedPolicyHolderIdNullable.Value;

			var allInsuredRecords = await CGLInsuredService.GetInsuredRecordsAsync();
			var allUndStatuses = await CGLUndStatusService.GetStatusAsync();
			var allCoverages = await CGLCoverageService.GetCoverageAsync();

			insuredDetailsList = (
				from insured in allInsuredRecords
				join status in allUndStatuses on insured.ID_Insured equals status.InsuredID
				join coverage in allCoverages on insured.ID_Insured equals coverage.ID_Insured
				where insured.Type == "Short Term"
					&& status.Und_Status == "Approved"
					&& status.ExtendedAge == "No"
					&& insured.ID_Policy_Holder == selectedPolicyHolderId
				select new InsuredDetailView
					{
						Insured = insured,
						UndStatus = status,
						Coverage = coverage
					}
			).ToList();

			originalInsuredDetailsList = new List<InsuredDetailView>(insuredDetailsList);
		}
		else
		{
			insuredDetailsList = new List<InsuredDetailView>();
		}
		ApplyFilters();
		StateHasChanged();
	}

	private void ToggleZoom(string imageUrl)
	{
		if (zoomedImageUrl == imageUrl)
			zoomedImageUrl = null;
		else
			zoomedImageUrl = imageUrl;
	}

	private string GetZoomClass(string imageUrl)
	{
		return zoomedImageUrl == imageUrl
			? "img-fluid border border-dark shadow-lg"
			: "img-fluid";
	}

	private void ShowZoomedImage(string imageUrl)
	{
		zoomedImageUrl = imageUrl;
		showZoomedImage = true;
	}

	private void ApplyFilters()
	{
		var filteredList = new List<InsuredDetailView>(originalInsuredDetailsList);

		// Filter by year
		if (selectedYear.HasValue)
		{
			filteredList = filteredList
				.Where(x => x.Coverage?.Effective_Date.Year == selectedYear.Value)
				.ToList();
		}

		// Filter by amount
		if (!string.IsNullOrEmpty(selectedAmountFilter))
		{
			filteredList = filteredList
				.Where(x =>
					(selectedAmountFilter == "Below100K" && x.Coverage?.Amount_Of_Insured < 100000) ||
					(selectedAmountFilter == "Above100K" && x.Coverage?.Amount_Of_Insured >= 100000) ||
					(selectedAmountFilter == "Above300K" && x.Coverage?.Amount_Of_Insured > 300000)
				).ToList();
		}

		// Filter by search text
		if (!string.IsNullOrEmpty(searchText))
		{
			var searchTerms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

			filteredList = filteredList
				.Where(x =>
					searchTerms.All(term =>
						(x.Insured?.First_Name != null && x.Insured.First_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
						(x.Insured?.Last_Name != null && x.Insured.Last_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
						(x.Insured?.Middle_Name != null && x.Insured.Middle_Name.Contains(term, StringComparison.OrdinalIgnoreCase))
					)
				).ToList();
		}

		insuredDetailsList = filteredList;
	}

	private async Task ToggleApplications(int idCB, string dchsFrom, string dchsTo)
	{
		if (expandedRowId == idCB)
		{
			expandedRowId = null;
		}
		else
		{
			expandedRowId = idCB;
			await LoadInsuredDetails(dchsFrom, dchsTo);
		}
		StateHasChanged();
	}

	private async Task LoadInsuredDetails(string dchsFrom, string dchsTo)
	{
		insuredDetailsList.Clear();

		var allInsuredRecords = await CGLInsuredService.GetInsuredRecordsAsync();
		var allCoverages = await CGLCoverageService.GetCoverageAsync();
		var allUndStatuses = await CGLUndStatusService.GetStatusAsync();

		insuredDetailsList = allInsuredRecords
			.Where(i => i.DCHS == dchsFrom || i.DCHS == dchsTo)
			.Select(i => new InsuredDetailView
				{
					Insured = i,
					Coverage = allCoverages.FirstOrDefault(c => c.ID_Insured == i.ID_Insured),
					UndStatus = allUndStatuses.FirstOrDefault(u => u.InsuredID == i.ID_Insured)
				})
			.ToList();
		StateHasChanged();
	}

	private async Task ViewDetails(CGLInsured insured)
	{
		selectedInsured = await CGLInsuredService.GetInsuredByIdAsync(insured.ID_Insured);
		var allUndStatuses = await CGLUndStatusService.GetStatusAsync();
		status = allUndStatuses.FirstOrDefault(u => u.InsuredID == insured.ID_Insured);
		selectedCoverage = await CGLCoverageService.GetCoverageByInsuredIdAsync(insured.ID_Insured);
		policyHolder = await CGLPolicyHolderServices.GetPolicyHolderByIdAsync(selectedInsured.ID_Policy_Holder);

		await LoadHealthQuestionsAndAnswers();
		await LoadSubstandardRatings();
		await LoadBeneficiaries();

		isModalVisible = true;
		StateHasChanged();
	}
	private async Task LoadSubstandardRatings()
	{
		if (selectedInsured != null)
		{
			substandardRatings = await CGLSubstandardRatingService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}
	private async Task LoadHealthQuestionsAndAnswers()
	{
		if (selectedInsured != null)
		{
			healthQuestions = await CGLHealthQuestionsService.GetSubstandardAsync();
			healthAnswers = await CGLHealthAnswerService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}

	private async Task LoadBeneficiaries()
	{
		if (selectedInsured != null)
		{
			beneficiaries = await CGLBeneficiaryService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}

	private async Task ViewLoanHistory(CGLInsured insured)
	{
		loanHistoryList = await FetchLoanHistory(insured.Last_Name, insured.First_Name, insured.Middle_Name, insured.Date_Of_Birth, insured.ID_Insured);
		showLoanHistoryModal = true;
	}

	private async Task<List<LoanHistory>> FetchLoanHistory(string lastName, string firstName, string middleName, DateTime dateOfBirth, int insuredId)
	{
		var matchingInsureds = await _context.CGL_INSURED
			.Where(i => i.Last_Name == lastName && i.First_Name == firstName && i.Middle_Name == middleName && i.Date_Of_Birth == dateOfBirth)
			.ToListAsync();

		var loanHistories = new List<LoanHistory>();

		foreach (var insured in matchingInsureds)
		{
			var coverage = await _context.CGL_Coverage
				.Where(c => c.ID_Insured == insured.ID_Insured)
				.ToListAsync();

			foreach (var cov in coverage)
			{

				var status = await _context.CGL_UndStatus
					.Where(s => s.InsuredID == insured.ID_Insured)
					.FirstOrDefaultAsync();

				var policyHolder = await _context.CGL_Policy_Holder
					.Where(ph => ph.ID_Policy_Holder == insured.ID_Policy_Holder)
					.FirstOrDefaultAsync();

				loanHistories.Add(new LoanHistory
					{
						LastName = insured.Last_Name,
						FirstName = insured.First_Name,
						MiddleName = insured?.Middle_Name,
						DateOfBirth = insured.Date_Of_Birth,
						AmountOfLoan = cov.Amount_Of_Insured,
						Status = status?.Und_Status,
						BankName = policyHolder?.Policy_Holder_Name,
						ImageUrl = $"{NavigationManager.BaseUri}validid/{insured.Image}"
					});
			}
		}
		return loanHistories;
	}

	// For Valid ID Displaying
	private async Task ViewIDInModal(CGLInsured insured)
	{
		var insuredRecord = await CGLInsuredService.GetInsuredByIdAsync(insured.ID_Insured);
		if (insuredRecord != null && !string.IsNullOrEmpty(insuredRecord.Image))
		{
			imageUrl = $"{NavigationManager.BaseUri}validid/{insuredRecord.Image}";
			isImageModalVisible = true;
		}
	}

	//Closing of Modals thru Close Button and 'X' Button
	private void CloseModal()
	{
		status = null;
		selectedInsured = null;
		selectedCoverage = null;
		zoomedImageUrl = null;

		isModalVisible = false; //Close View Details Modal
		isConfirmationVisible = false;  //Close Confirmation Modal
		isRemarksEditable = false; //Close the Editable Fields for Underwriting Update
		showLoanHistoryModal = false; //Close Loan History Modal
		isImageModalVisible = false;
		showZoomedImage = false;
	}
}
