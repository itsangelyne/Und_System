@page "/testingpage"
@using Und_System.Context;
@using Und_System.Data;
@using Und_System.Services;
@inject CGLInsuredService CGLInsuredService
@inject CGLPolicyHolderServices CGLPolicyHolderServices
@inject StateService StateService
@inject SweetAlertService sweetAlertService
@inject CGLInsuredStatusService CGLInsuredStatusService
@inject CGLUndStatusService CGLUndStatusService
@inject NavigationManager NavigationManager
@layout MainLayout

<h1><b>DASHBOARD</b></h1>
<hr />

@if (StateService.SelectedBankId.HasValue)
{
	<div class="d-flex justify-content-between align-items-center" style="z-index:1050;">
		<div class="d-flex align-items-center">
			<h4 class="mb-0">
				Bank: <strong>@StateService.SelectedBankName</strong>
			</h4>
		</div>
		<div class="d-flex align-items-center">

			<div class="ms-0">
				<button class="btn btn-outline-success" @onclick="GoBackToBankList"><i class="bi bi-bank" m-3></i> Bank List</button>
			</div>
		</div>
	</div>
}

<div class="container mt-3 mb-3 text-center">
	@* <div class="text-center mb-4">
        <div class="custom-dropdown-wrapper">
            <select id="headingDropdown" class="custom-dropdown" @onchange="OnFilterChanged">
                <option value="All" selected>APPLICATIONS</option>
                <option value="Regular">REGULAR APPLICATIONS</option>
                <option value="Extended">EXTENDED AGE APPLICATIONS</option>
            </select>
        </div>
    </div> *@
	<h2 class="text-center fw-bold mb-4">APPLICATIONS</h2>
</div>

<div class="row g-3">
	<!--Pending-->
	<div class="col-12 col-md-6 col-lg-4">
		<div class="card shadow-sm rounded" style="z-index: -1;">
			<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
				Pending
			</div>
			<div class="card-body">
				<div class="row text-center">
					<div class="col-6 border-end">
						<h6 class="fw-bold mb-1">Long Term</h6>
						<p class="mb-0" style="font-size:24px;">@pendingLongTermCount</p>
					</div>
					<div class="col-6">
						<h6 class="fw-bold mb-1">Short Term</h6>
						<p class="mb-0" style="font-size:24px;">@pendingShortTermCount</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--Approved-->
	<div class="col-12 col-md-6 col-lg-4">
		<div class="card shadow-sm rounded" style="z-index: -1;">
			<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
				Approved
			</div>
			<div class="card-body">
				<div class="row text-center">
					<div class="col-6 border-end">
						<h6 class="fw-bold mb-1">Long Term</h6>
						<p class="mb-0" style="font-size:24px;">@approvedLongTermCount</p>
					</div>
					<div class="col-6">
						<h6 class="fw-bold mb-1">Short Term</h6>
						<p class="mb-0" style="font-size:24px;">@approvedShortTermCount</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--Refund-->
	<div class="col-12 col-md-6 col-lg-4">
		<div class="card shadow-sm rounded" style="z-index: -1;">
			<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
				Refund
			</div>
			<div class="card-body">
				<div class="row text-center">
					<div class="col-6 border-end">
						<h6 class="fw-bold mb-1">Long Term</h6>
						<p class="mb-0" style="font-size:24px;">@refundLongTermCount</p>
					</div>
					<div class="col-6">
						<h6 class="fw-bold mb-1">Short Term</h6>
						<p class="mb-0" style="font-size:24px;">@refundShortTermCount</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row g-3 justify-content-center">
		<!--Terminated-->
		<div class="col-12 col-md-6 col-lg-4">
			<div class="card shadow-sm rounded" style="z-index: -1;">
				<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
					Terminated
				</div>
				<div class="card-body">
					<div class="row text-center">
						<div class="col-6 border-end">
							<h6 class="fw-bold mb-1">Long Term</h6>
							<p class="mb-0" style="font-size:24px;">@terminatedLongTermCount</p>
						</div>
						<div class="col-6">
							<h6 class="fw-bold mb-1">Short Term</h6>
							<p class="mb-0" style="font-size:24px;">@terminatedShortTermCount</p>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!--Declined-->
		<div class="col-12 col-md-6 col-lg-4">
			<div class="card shadow-sm rounded" style="z-index: -1;">
				<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
					Declined
				</div>
				<div class="card-body">
					<div class="row text-center">
						<div class="col-6 border-end">
							<h6 class="fw-bold mb-1">Long Term</h6>
							<p class="mb-0" style="font-size:24px;">@declinedLongTermCount</p>
						</div>
						<div class="col-6">
							<h6 class="fw-bold mb-1">Short Term</h6>
							<p class="mb-0" style="font-size:24px;">@declinedShortTermCount</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Compliance and Others Section -->
	<div class="container mt-3">
		<h2 class="text-center fw-bold mb-4">COMPLIANCE AND RENEWAL</h2>
		<div class="row g-3 justify-content-center">
			<!-- Compliance Section -->
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card shadow-sm rounded" style="z-index: -1;">
					<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
						Compliance
					</div>
					<div class="card-body">
						<div class="row text-center">
							<div class="col-6 border-end">
								<h6 class="fw-bold mb-1">Long Term</h6>
								<p class="mb-0" style="font-size:24px;">@medicalLongTermCount</p>
							</div>
							<div class="col-6">
								<h6 class="fw-bold mb-1">Short Term</h6>
								<p class="mb-0" style="font-size:24px;">@medicalShortTermCount</p>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!--Renewal-->
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card shadow-sm rounded" style="z-index: -1;">
					<div class="card-header text-white text-center fw-bold" style="background-color: #57855E; font-size: 20px;">
						Renewal
					</div>
					<div class="card-body">
						<div class="row text-center">
							<h6 class="fw-bold mb-1">Long Term</h6>
							<p class="mb-0" style="font-size:24px;">@renewalLongTermCount</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private int pendingLongTermCount = 0;
	private int pendingShortTermCount = 0;
	private int pendingExtendedCount = 0;
	private int approvedLongTermCount = 0;
	private int approvedShortTermCount = 0;
	private int approvedExtendedCount = 0;
	private int terminatedLongTermCount = 0;
	private int terminatedShortTermCount = 0;
	private int terminatedExtendedCount = 0;
	private int declinedLongTermCount = 0;
	private int declinedShortTermCount = 0;
	private int declinedExtendedCount = 0;
	private int medicalLongTermCount = 0;
	private int medicalShortTermCount = 0;
	private int medicalExtendedCount = 0;
	private int refundLongTermCount = 0;
	private int refundShortTermCount = 0;
	private int refundExtendedCount = 0;
	private int renewalLongTermCount = 0;
	private int renewalExtendedCount = 0;

	private string selectedBank = "";
	private string selectedFilter = "All";

	private List<CGLPolicyHolder> banks = new List<CGLPolicyHolder>();
	private List<CGLInsured> allApplications = new List<CGLInsured>();
	private List<CGL_Insured_Status> insuredStatuses = new List<CGL_Insured_Status>();
	private List<CGL_UndStatus> undStatuses = new List<CGL_UndStatus>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await StateService.LoadStateAsync();
			allApplications = await CGLInsuredService.GetInsuredAsync();
			banks = await CGLPolicyHolderServices.GetBanksAsync();
			insuredStatuses = await CGLInsuredStatusService.GetStatusAsync();
			undStatuses = await CGLUndStatusService.GetStatusAsync();

			if (StateService.SelectedBankId.HasValue)
			{
				selectedBank = StateService.SelectedBankId.ToString();
				FilterApplications();
			}
			else
			{
				SetCounts(allApplications);
			}
			StateHasChanged();
		}
	}

	private void OnFilterChanged(ChangeEventArgs e)
	{
		selectedFilter = e.Value.ToString();
		FilterApplications();
	}

	private void FilterApplications()
	{
		//default selection for displaying total application counts
		var filteredApplications = allApplications
			.Where(x => x.ID_Policy_Holder == StateService?.SelectedBankId.Value)
			.ToList();

		//regular selection for displaying total application counts
		if (selectedFilter == "Regular")
		{
			filteredApplications = filteredApplications
				.Where(app => undStatuses.FirstOrDefault(u => u.InsuredID == app.ID_Insured)?.ExtendedAge == "No")
				.ToList();
		}
		//extended age selection for displaying total application counts
		else if (selectedFilter == "Extended")
		{
			filteredApplications = filteredApplications
				.Where(app => undStatuses.FirstOrDefault(u => u.InsuredID == app.ID_Insured)?.ExtendedAge == "Yes")
				.ToList();
		}

		SetCounts(filteredApplications);
	}

	private void SetCounts(List<CGLInsured> applications)
	{
		ResetCounts();

		foreach (var app in applications)
		{
			var undStatus = undStatuses.FirstOrDefault(u => u.InsuredID == app.ID_Insured);
			if (undStatus != null)
			{
				switch (undStatus.Und_Status)
				{
					case "Pending":
						pendingLongTermCount += app.Type == "Long Term" ? 1 : 0;
						pendingShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
					case "Approved":
						approvedLongTermCount += app.Type == "Long Term" ? 1 : 0;
						approvedShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
					case "Declined":
						declinedLongTermCount += app.Type == "Long Term" ? 1 : 0;
						declinedShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
					case "Compliance":
						medicalLongTermCount += app.Type == "Long Term" ? 1 : 0;
						medicalShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
					case "For Refund":
						refundLongTermCount += app.Type == "Long Term" ? 1 : 0;
						refundShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
					case "Renewal":
						renewalLongTermCount += app.Type == "Long Term" ? 1 : 0;
						break;
					case "Terminated":
						terminatedLongTermCount += app.Type == "Long Term" ? 1 : 0;
						terminatedShortTermCount += app.Type == "Short Term" ? 1 : 0;
						break;
				}
			}
		}
	}

	private void ResetCounts()
	{
		pendingLongTermCount = 0;
		pendingShortTermCount = 0;
		pendingExtendedCount = 0;
		approvedLongTermCount = 0;
		approvedShortTermCount = 0;
		approvedExtendedCount = 0;
		terminatedLongTermCount = 0;
		terminatedShortTermCount = 0;
		terminatedExtendedCount = 0;
		declinedLongTermCount = 0;
		declinedShortTermCount = 0;
		declinedExtendedCount = 0;
		medicalLongTermCount = 0;
		medicalShortTermCount = 0;
		medicalExtendedCount = 0;
		refundLongTermCount = 0;
		refundShortTermCount = 0;
		refundExtendedCount = 0;
		renewalLongTermCount = 0;
		renewalExtendedCount = 0;
	}

	private async Task GoBackToBankList()
	{
		await StateService.SetSelectedBank(null, null);
		NavigationManager.NavigateTo("/banklisting");
	}
}
<tbody>
@for (int i = 0; i < healthQuestions.Count; i++)
{
    var question = healthQuestions[i];

    if (question.Status == "display")
    {
        var answer = healthAnswers.FirstOrDefault(a => a.ID_Health_Question == question.ID);

        if (string.IsNullOrEmpty(question.InputType))
        {
            <tr>
                <td colspan="3">
                    <p class="fw-bold mb-0 text-center" style="word-wrap: break-word; resize: none;" readonly>@question.Question</p>
                    @if (!string.IsNullOrEmpty(answer?.Input_Type) && answer.Input_Type == "No")
                    {
                        <textarea class="form-control" readonly style="height: 100px; resize: none; text-align: justify; text-justify: inter-word;">@(!string.IsNullOrWhiteSpace(answer.Remarks) ? answer.Remarks : "NONE")</textarea>
                    }
                </td>
            </tr>
        }
        else
        {
            if (question.NO % 1 != 0)
            {
                <tr>
                    <td colspan="2" class="text-end" style="vertical-align: middle; width: 50%;">
                        <div class="w-100" style="resize: none; overflow: hidden;" readonly>@question.Question</div>
                    </td>
                    <td style="vertical-align: middle; width: 50%;">
                        @{
                            string valueToShow = "NONE";

                            if (question.ID == 16)
                            {
                                valueToShow = !string.IsNullOrWhiteSpace(answer?.Remarks) ? answer.Remarks : "NONE";
                            }
                            else
                            {
                                valueToShow = !string.IsNullOrWhiteSpace(answer?.Answer) ? answer.Answer : "NONE";
                            }
                        }
                        <div class="form-control text-center" readonly style="word-wrap: break-word; white-space: pre-wrap; resize: none; overflow: hidden; text-align: justify; text-justify: inter-word;">@valueToShow</div>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td style="vertical-align: middle; text-align: center; width: 65px;">
                        <div class="text-center">@question.NO</div>
                    </td>
                    <td style="vertical-align: middle; width: 75%;">
                        <div style="word-wrap: break-word; white-space: pre-wrap; resize: none; overflow: hidden; text-align: justify; text-justify: inter-word;" readonly>@question.Question</div>
                    </td>
                    <td style="vertical-align: middle; width: 50%;">
                        @{
                            string inputType = !string.IsNullOrWhiteSpace(answer?.Input_Type) ? answer.Input_Type : "NONE";
                        }
                        <input type="text" class="form-control text-center @(inputType == "NONE" ? "fst-italic text-muted" : "")" value="@inputType" readonly />
                    </td>
                </tr>
            }
        }

        if (!string.IsNullOrEmpty(answer?.Input_Type) && answer.Input_Type == "No")
        {
            <tr>
                <td colspan="3">
                    <textarea class="form-control" readonly style="height: 100px; margin-left: 50px; width: 1000px; resize: none;">@(!string.IsNullOrWhiteSpace(answer.Remarks) ? answer.Remarks : "NONE")</textarea>
                </td>
            </tr>
        }
    }
}
</tbody>

