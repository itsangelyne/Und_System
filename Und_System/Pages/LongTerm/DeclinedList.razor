@page "/longterm/declinedlist"
@using Microsoft.EntityFrameworkCore;
@using Und_System.Context;
@using Und_System.Data;
@using Und_System.Services;
@inject ApplicationDbContext _context
@inject CGLInsuredService CGLInsuredService
@inject CGLPolicyHolderServices CGLPolicyHolderServices
@inject StateService StateService
@inject CGLCreditDebitServices CGLCreditDebitServices
@inject CGLCoverageService CGLCoverageService
@inject CGLSubstandardRatingService CGLSubstandardRatingService
@inject CGLUndStatusService CGLUndStatusService
@inject CGLHealthQuestionsService CGLHealthQuestionsService
@inject CGLHealthAnswerService CGLHealthAnswerService
@inject CGLBeneficiaryService CGLBeneficiaryService

<h1><b>DECLINED APPLICATIONS</b></h1>
<hr />
<div class="container my-4 p-4 rounded" style="background-color:#FFFFFF; max-width:100%; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
	<h3 class="text-center fw-bold text-decoration-underline">LONG TERM</h3>
	<h4 class="text-center fw-bold mb-0">Bank: @StateService.SelectedBankName</h4>
	<div class="card-body">
		<div class="row justify-content-evenly">
			<div class="col-md-4 mb-3">
				<input type="text" class="form-control" placeholder="Search..." id="searchbar" @bind="searchText" @bind:event="oninput" />
			</div>
			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="amountDropdown" class="me-2 fw-bold" style="white-space: nowrap; min-width: 140px;">Filter by Amount:</label>
				<select class="form-control flex-grow-1" id="amountDropdown">
					<option>Select Amount</option>
					<option>100K and Below</option>
					<option>100K and Above</option>
					<option>300K and Above</option>
				</select>
			</div>
			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="yearDropdown" class="me-1 fw-bold" style="white-space: nowrap; min-width: 120px;">Filter by Year:</label>
				<select class="form-control flex-grow-1" id="yearDropdown" @bind="selectedYear" @bind:event="onchange">
					<option value="">Select Year</option>
					@foreach (var year in years)
					{
						<option value="@year">@year</option>
					}
				</select>
			</div>
		</div>
		<div class="table-responsive">
			<table class="table table-bordered">
				<thead class="text-white" style="background-color: #5d835c;">
					<tr>
						<th class="text-center">Full Name</th>
						<th class="text-center">Remarks</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class="text-center">Bonifacio, Andress</td>
						<td class="text-center">Didn't Comply Requirements</td>
					</tr>
					<tr>
						<td class="text-center">Calzado, Ken</td>
						<td class="text-center">Refunded</td>
					</tr>
					@* @if (insuredDetailsList != null && insuredDetailsList.Count > 0)
					{
						foreach (var detail in insuredDetailsList)
						{
							var insured = detail.Insured;
							var coverage = detail.Coverage;
							var undStatus = detail.UndStatus;

							<tr>
								<td class="text-center"><b>@insured?.Last_Name</b>, @insured?.First_Name @insured?.Middle_Name</td>
								<td class="text-center">@undStatus?.Remarks</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="4" class="text-center">No insured details available</td>
						</tr>
					} *@
				</tbody>
			</table>
		</div>
	</div>
</div>

@if (StatusModal)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-xl">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title"><b>Update Status</b></h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<div class="col-md mb-3">
						<div class="border rounded p-3 mb-3">
							<div class="col-md mb-3">
								<div class="row">
									<div class="col-md mb-3">
										<label for="status" class="form-label">Underwriting Status</label>
										<select class="form-select" id="status" @bind-value="status.Und_Status" @bind-value:event="onchange" disabled="@(!isRemarksEditable)">
											<option disabled>Select Status</option>
											<option value="Pending">Pending</option>
											<option value="Approved">Approved</option>
											<option value="Declined">Declined</option>
											<option value="For Medical">For Medical</option>
											<option value="For Refund">For Refund</option>
											<option value="Renewal">Renewal</option>
										</select>
									</div>
									<div class="col-md mb-3">
										<label for="psdstatus" class="form-label">PSD Status</label>
										<input type="text" class="form-control" id="Class" value="@status?.PSD_Status" readonly />
									</div>
								</div>
							</div>
							<div class="col-md mb-3">
								<div class="col-md mb-3">
									<label for="remarks" class="form-label">Remarks</label>
									<textarea class="form-control" rows="4" cols="50" style="resize:none;" id="remarks" @bind="status.Remarks" readonly="@(!isRemarksEditable)"></textarea>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="modal-footer">
					@if (isRemarksEditable)
					{
						<button type="button" class="btn btn-primary" @onclick="ShowSaveRemarksConfirmation">Save Changes</button>
					}
					else
					{
						<button type="button" class="btn btn-outline-primary" @onclick="ToggleRemarksEditable">Underwriting Update</button>
					}
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Close</button>
				</div>
			</div>
		</div>
	</div>
}
<!--Confirmation Modal-->
@if (isConfirmationVisible)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Confirm Changes</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					@if (currentAction == "UpdateRemarks")
					{
						<p>Are you sure you want to save these changes?</p>
					}
					else if (currentAction == "SaveDetails")
					{
						<p>Are you sure you want to update these details for <b>@selectedInsured?.First_Name @selectedInsured?.Last_Name</b>?</p>
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Cancel</button>
					<button type="button" class="btn btn-outline-primary" @onclick="ConfirmSaveChanges">Confirm Changes</button>
				</div>
			</div>
		</div>
	</div>
}

@if (showLoanHistoryModal)
{
	<div class="modal d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-xl" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Loan History</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<div>Total Amount Of Loan: </div>
					<div class="table-responsive">
						<table class="table table-bordered">
							<thead class="text-white" style="background-color: #5d835c;">
								<tr>
									<th>Full Name</th>
									<th>Date of Birth</th>
									<th>Amount of Loan</th>
									<th>Status</th>
									<th>Name of Bank</th>
								</tr>
							</thead>
							<tbody>
								@if (loanHistoryList != null && loanHistoryList.Count > 0)
								{
									foreach (var loan in loanHistoryList)
									{
										<tr>
											<td class="text-center"><b>@loan.LastName</b>, @loan.FirstName @loan.MiddleName</td>
											<td class="text-center">@loan.DateOfBirth.ToString("yyyy-MM-dd")</td>
											<td class="text-center">@loan.AmountOfLoan</td>
											<td class="text-center">@loan.Status</td>
											<td class="text-center">@loan.BankName</td>
										</tr>
									}
								}
								else
								{
									<tr>
										<td colspan="5" class="text-center">No loan history available</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	public class InsuredDetailView
	{
		public CGLInsured? Insured { get; set; }
		public CGLCoverage? Coverage { get; set; }
		public CGL_UndStatus? UndStatus { get; set; }
	}

	public class LoanHistory
	{
		public required string LastName { get; set; }
		public required string FirstName { get; set; }
		public string? MiddleName { get; set; }
		public DateTime DateOfBirth { get; set; }
		public double AmountOfLoan { get; set; }
		public required string Status { get; set; }
		public required string BankName { get; set; }
	}

	private int? selectedYear;
	private string? currentAction;
	private bool isEditing = false;
	private int? expandedRowId = null;
	private bool isConfirmationVisible = false;
	private bool isRemarksEditable = false;
	private bool showLoanHistoryModal = false;
	private string searchText = string.Empty;
	private List<int> years = new List<int>();
	private List<CGLCreditDebit> releaseList = new List<CGLCreditDebit>();
	private List<InsuredDetailView> insuredDetailsList = new List<InsuredDetailView>();
	private List<CGL_Substandard_Rating> substandardRatings = new();
	private List<CGL_Health_Question> healthQuestions = new();
	private List<CGL_Health_Answer> healthAnswers = new();
	private List<CGL_Beneficiary> beneficiaries = new();
	private List<LoanHistory> loanHistoryList = new List<LoanHistory>();

	private bool StatusModal = false;
	private CGLInsured? selectedInsured;
	private CGLCoverage? selectedCoverage;
	private CGL_UndStatus? status;
	private CGLPolicyHolder? policyHolder;

	protected override async Task OnInitializedAsync()
	{
		int currentYear = DateTime.Now.Year;
		years = Enumerable.Range(2000, currentYear - 2000 + 1).ToList();
		await LoadCreditDebitData();
	}
	private async Task LoadCreditDebitData()
	{
		int? selectedPolicyHolderIdNullable = StateService.SelectedBankId;

		if (selectedPolicyHolderIdNullable.HasValue)
		{
			int selectedPolicyHolderId = selectedPolicyHolderIdNullable.Value;

			var allInsuredRecords = await CGLInsuredService.GetInsuredRecordsAsync();
			var allUndStatuses = await CGLUndStatusService.GetStatusAsync();
			var allCoverages = await CGLCoverageService.GetCoverageAsync();

			insuredDetailsList = (from insured in allInsuredRecords
										join status in allUndStatuses on insured.ID_Insured equals status.InsuredID
										join coverage in allCoverages on insured.ID_Insured equals coverage.ID_Insured
										where insured.Type == "Long Term"
										&& status.Und_Status == "Declined"
										&& insured.ID_Policy_Holder == selectedPolicyHolderId
										select new InsuredDetailView
									  {
										  Insured = insured,
										  UndStatus = status,
										  Coverage = coverage
									  }).ToList();

			if (selectedYear.HasValue)
			{
				insuredDetailsList = insuredDetailsList
					.Where(x => x.Coverage.Effective_Date.Year == selectedYear.Value)
					.ToList();
			}
		}
		else
		{
			insuredDetailsList = new List<InsuredDetailView>();
		}

		StateHasChanged();
	}

	private async Task ToggleApplications(int idCB, string dchsFrom, string dchsTo)
	{
		if (expandedRowId == idCB)
		{
			expandedRowId = null;
		}
		else
		{
			expandedRowId = idCB;
			await LoadInsuredDetails(dchsFrom, dchsTo);
		}
		StateHasChanged();
	}

	private async Task LoadInsuredDetails(string dchsFrom, string dchsTo)
	{
		insuredDetailsList.Clear();

		var allInsuredRecords = await CGLInsuredService.GetInsuredRecordsAsync();
		var allCoverages = await CGLCoverageService.GetCoverageAsync();
		var allUndStatuses = await CGLUndStatusService.GetStatusAsync();

		insuredDetailsList = allInsuredRecords
			.Where(i => i.DCHS == dchsFrom || i.DCHS == dchsTo)
			.Select(i => new InsuredDetailView
				{
					Insured = i,
					Coverage = allCoverages.FirstOrDefault(c => c.ID_Insured == i.ID_Insured),
					UndStatus = allUndStatuses.FirstOrDefault(u => u.InsuredID == i.ID_Insured)
				})
			.ToList();
		StateHasChanged();
	}

	private async Task UpdateStatus(CGLInsured insured)
	{
		selectedInsured = await CGLInsuredService.GetInsuredByIdAsync(insured.ID_Insured);
		var allUndStatuses = await CGLUndStatusService.GetStatusAsync();
		status = allUndStatuses.FirstOrDefault(u => u.InsuredID == insured.ID_Insured);
		selectedCoverage = await CGLCoverageService.GetCoverageByInsuredIdAsync(insured.ID_Insured);
		policyHolder = await CGLPolicyHolderServices.GetPolicyHolderByIdAsync(selectedInsured.ID_Policy_Holder);

		StatusModal = true;
		StateHasChanged();
	}
	private async Task LoadSubstandardRatings()
	{
		if (selectedInsured != null)
		{
			substandardRatings = await CGLSubstandardRatingService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}
	private async Task LoadHealthQuestionsAndAnswers()
	{
		if (selectedInsured != null)
		{
			healthQuestions = await CGLHealthQuestionsService.GetSubstandardAsync();
			healthAnswers = await CGLHealthAnswerService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}

	private async Task LoadBeneficiaries()
	{
		if (selectedInsured != null)
		{
			beneficiaries = await CGLBeneficiaryService.GetByInsuredIdAsync(selectedInsured.ID_Insured);
		}
	}

	private async Task ViewLoanHistory(CGLInsured insured)
	{
		loanHistoryList = await FetchLoanHistory(insured.Last_Name, insured.First_Name, insured.Middle_Name, insured.Date_Of_Birth, insured.ID_Insured);
		showLoanHistoryModal = true;
	}

	private async Task<List<LoanHistory>> FetchLoanHistory(string lastName, string firstName, string middleName, DateTime dateOfBirth, int insuredId)
	{
		var matchingInsureds = await _context.CGL_INSURED
			.Where(i => i.Last_Name == lastName && i.First_Name == firstName && i.Middle_Name == middleName && i.Date_Of_Birth == dateOfBirth)
			.ToListAsync();

		var loanHistories = new List<LoanHistory>();

		foreach (var insured in matchingInsureds)
		{
			var coverage = await _context.CGL_Coverage
				.Where(c => c.ID_Insured == insured.ID_Insured)
				.ToListAsync();

			foreach (var cov in coverage)
			{

				var status = await _context.CGL_UndStatus
					.Where(s => s.InsuredID == insured.ID_Insured)
					.FirstOrDefaultAsync();

				var policyHolder = await _context.CGL_Policy_Holder
					.Where(ph => ph.ID_Policy_Holder == insured.ID_Policy_Holder)
					.FirstOrDefaultAsync();

				loanHistories.Add(new LoanHistory
					{
						LastName = insured.Last_Name,
						FirstName = insured.First_Name,
						MiddleName = insured?.Middle_Name,
						DateOfBirth = insured.Date_Of_Birth,
						AmountOfLoan = cov.Amount_Of_Insured,
						Status = status?.Und_Status,
						BankName = policyHolder?.Policy_Holder_Name
					});
			}
		}
		return loanHistories;
	}
	private void ToggleEdit()
	{
		isEditing = !isEditing;
	}

	private void ToggleRemarksEditable()
	{
		isRemarksEditable = !isRemarksEditable;
	}
	private void ShowSaveDetailsConfirmation()
	{
		currentAction = "SaveDetails";
		isConfirmationVisible = true;
	}

	private void ShowSaveRemarksConfirmation()
	{
		currentAction = "UpdateRemarks";
		isConfirmationVisible = true;
	}

	private async Task ConfirmSaveChanges()
	{
		if (currentAction == "UpdateRemarks" && status != null)
		{
			await CGLUndStatusService.UpdateStatusAsync(status);
		}
		else if (currentAction == "SaveDetails" && selectedInsured != null)
		{
			await CGLInsuredService.UpdateInsuredAsync(selectedInsured);
		}
		isConfirmationVisible = false;
		isEditing = false;
		isRemarksEditable = false;
		await LoadCreditDebitData();
	}
	private void CloseModal()
	{
		status = null;
		selectedInsured = null;
		selectedCoverage = null;

		isEditing = false;
		StatusModal = false;
		isRemarksEditable = false;
		showLoanHistoryModal = false;
	}
}

