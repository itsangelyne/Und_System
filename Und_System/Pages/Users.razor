@page "/emplisting"
@using Und_System.Context;
@using Und_System.Data;
@using Und_System.Services;
@inject CGLUnderwritingUserService CGLUnderwritingUserService

<h1><b>EMPLOYEE LIST</b></h1>
<hr />

<div class="container my-4 p-4 rounded" style="background-color:#FFFFFF; max-width:100%; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4 mb-3 d-flex mb-3 align-items-center">
                <label for="searchbar" class="form-label me-2 fw-bold mb-0">Search:</label>
                <input type="text" class="form-control" placeholder="Search..." id="searchbar" @bind="searchText" @bind:event="oninput" />
            </div>
            <div class="col-md-4 mb-3 d-flex align-items-center">
                <label for="deptdropdown" class="form-label me-2 fw-bold mb-0">Department:</label>
                <select class="form-select flex-grow-1" id="deptdropdown">
                    <option>All Department</option>
                </select>
            </div>
            <div class="col-md-3 mb-3 d-flex align-items-center">
                <label for="deptdropdown" class="form-label me-2 fw-bold mb-0">Status:</label>
                <select class="form-select flex-grow-1" id="deptdropdown">
                    <option>All Status</option>
                    <option>Active</option>
                    <option>Inactive</option>
                </select>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered" style="overflow-x:scroll">
            <thead class="text-white" style="background-color: #5d835c;">
                <tr>
                    <th class="text-center">Employee No.</th>
                    <th class="text-center">Employee</th>
                    <th class="text-center">Department</th>
                    <th class="text-center">Status</th>
                    <th class="text-center">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (userList != null && userList.Count > 0)
                {
                    foreach (var users in userList.OrderBy(u => u.Status == "Inactive"))
                    {
                        <tr>
                            <td class="hover-cell align-content-center text-center">@users.EmployeeNo</td>
                            <td class="hover-cell align-content-center text-center">
                                <div>@users.First_Name @users.Last_Name</div>
                                <span class="text-muted " style="font-size: smaller;">@users.Email</span>
                            </td>
                            <td class="hover-cell align-content-center text-center">@users.Department</td>
                            <td class="hover-cell align-content-center text-center">@users.Status</td>
                            <td class="action-cell align-content-center text-center">
                                <button class="btn btn-outline-@(users.Status == "Active" ? "danger" : "success")" @onclick="() => ToggleUserStatus(users)">
                                    @(users.Status == "Active" ? "Deactivate" : "Activate")
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center text-danger fw-bold">No Users Available</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<CGL_UnderwritingUser> userList = new List<CGL_UnderwritingUser >();
    private string _searchText = string.Empty;
    private string searchText
    {
        get => _searchText;
        set
        {
            if (_searchText != value)
            {
                _searchText = value;
                ApplyFilters();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        userList = await CGLUnderwritingUserService.GetUserAsync();
    }

    private async Task ToggleUserStatus(CGL_UnderwritingUser users)
    {
        users.Status = users.Status == "Active" ? "Inactive" : "Active";

        await CGLUnderwritingUserService.UpdateUserStatusAsync(users);

        var userInList = userList.FirstOrDefault(u => u.UserID == users.UserID);
        if (userInList != null)
        {
            userInList.Status = users.Status;
        }
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        // Filter by search text
        if (!string.IsNullOrEmpty(searchText))
        {
            var searchTerms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            userList = userList
                .Where(x =>
                    searchTerms.All(term =>
                        (x.First_Name != null && x.First_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                        (x.Last_Name != null && x.Last_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                        (x.Email != null && x.Email.Contains(term, StringComparison.OrdinalIgnoreCase))
                    )
                ).ToList();
        }
        StateHasChanged();
    }
}