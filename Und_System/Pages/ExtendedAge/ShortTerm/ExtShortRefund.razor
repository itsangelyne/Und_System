@page "/extended/shortterm/refund"
@using Microsoft.EntityFrameworkCore;
@using Und_System.Context;
@using Und_System.Data;
@using Und_System.Services;
@inject ApplicationDbContext _context
@inject CGLInsuredService CGLInsuredService
@inject CGLPolicyHolderServices CGLPolicyHolderServices
@inject StateService StateService
@inject CGLCreditDebitServices CGLCreditDebitServices
@inject CGLCoverageService CGLCoverageService
@inject CGLSubstandardRatingService CGLSubstandardRatingService
@inject CGLUndStatusService CGLUndStatusService
@inject CGLHealthQuestionsService CGLHealthQuestionsService
@inject CGLHealthAnswerService CGLHealthAnswerService
@inject CGLBeneficiaryService CGLBeneficiaryService

<h1><b>EXTENDED AGE: SUBJECT FOR REFUND</b></h1>
<hr />
<div class="container my-4 p-4 rounded" style="background-color:#FFFFFF; max-width:100%; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
	<h3 class="text-center fw-bold text-decoration-underline">SHORT TERM</h3>
	<h4 class="text-center fw-bold mb-0">Bank: @StateService.SelectedBankName</h4>
	<div class="card-body">
		<div class="row justify-content-evenly">
			<div class="col-md-4 mb-3 d-flex mb-3 align-items-center">
				<label for="searchbar" class="form-label me-2 fw-bold mb-0">Search:</label>
				<input type="text" class="form-control" placeholder="Search..." id="searchbar" @bind="searchText" @bind:event="oninput" />
			</div>
			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="amountDropdown" class="me-2 fw-bold" style="white-space: nowrap; min-width: 140px;">Filter by Amount:</label>
				<select class="form-control flex-grow-1" id="amountDropdown" @onchange="OnAmountChanged">
					<option value="">Select Amount</option>
					<option value="Below100K">Below 100K</option>
					<option value="Above100K">100K and Above</option>
					<option value="Above300K">Above 300K</option>
				</select>
			</div>

			<div class="col-md-4 mb-3 d-flex align-items-center">
				<label for="yearDropdown" class="me-1 fw-bold" style="white-space: nowrap; min-width: 120px;">Filter by Year:</label>
				<select class="form-control flex-grow-1" id="yearDropdown" @onchange="OnYearChanged">
					<option value="">Select Year</option>
					@foreach (var year in years)
					{
						<option value="@year">@year</option>
					}
				</select>
			</div>
		</div>
		<div class="table-responsive">
			<table class="table table-bordered">
				<thead class="text-white" style="background-color: #5d835c;">
					<tr>
						<th class="text-center">Full Name</th>
						<th class="text-center">Date of Birth</th>
						<th class="text-center">Amount of Loan</th>
						<th class="text-center">Remarks</th>
					</tr>
				</thead>
				<tbody>
					@if (insuredDetailsList != null && insuredDetailsList.Count > 0)
					{
						foreach (var detail in insuredDetailsList)
						{
							var insured = detail.Insured;
							var coverage = detail.Coverage;
							var undStatus = detail.UndStatus;

							<tr>
								<td class="text-center"><b>@insured?.Last_Name</b>, @insured?.First_Name @insured?.Middle_Name</td>
								<td class="text-center">@insured?.Date_Of_Birth.ToString("yyyy-MM-dd")</td>
								<td class="text-center fw-bold">@coverage?.Amount_Of_Insured</td>
								<td class="text-center">@undStatus?.Remarks</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="4" class="text-center text-muted fst-italic">No Applications are subjected For Refund available</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@code {
	public class InsuredDetailView
	{
		public CGLInsured? Insured { get; set; }
		public CGLCoverage? Coverage { get; set; }
		public CGL_UndStatus? UndStatus { get; set; }
	}

	public class LoanHistory
	{
		public required string LastName { get; set; }
		public required string FirstName { get; set; }
		public string? MiddleName { get; set; }
		public DateTime DateOfBirth { get; set; }
		public double AmountOfLoan { get; set; }
		public required string Status { get; set; }
		public required string BankName { get; set; }
	}

	private int? selectedYear;
	private string? currentAction;
	private bool isEditing = false;
	private int? expandedRowId = null;
	private bool isRemarksEditable = false;
	private bool showLoanHistoryModal = false;
	private List<int> years = new List<int>();
	private List<CGLCreditDebit> releaseList = new List<CGLCreditDebit>();
	private List<InsuredDetailView> insuredDetailsList = new List<InsuredDetailView>();
	private List<CGL_Substandard_Rating> substandardRatings = new();
	private List<CGL_Health_Question> healthQuestions = new();
	private List<CGL_Health_Answer> healthAnswers = new();
	private List<CGL_Beneficiary> beneficiaries = new();
	private List<LoanHistory> loanHistoryList = new List<LoanHistory>();
	private List<InsuredDetailView> originalInsuredDetailsList = new List<InsuredDetailView>();

	private string? selectedAmountFilter;
	private bool isModalVisible = false;
	private CGLInsured? selectedInsured;
	private CGLCoverage? selectedCoverage;
	private CGL_UndStatus? status;
	private CGLPolicyHolder? policyHolder;
	private string _searchText = string.Empty;
	private string searchText
	{
		get => _searchText;
		set
		{
			if (_searchText != value)
			{
				_searchText = value;
				ApplyFilters();
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		int currentYear = DateTime.Now.Year;
		years = Enumerable.Range(2000, currentYear - 2000 + 1).ToList();
		await LoadCreditDebitData();
	}
	//Year Filter
	private async Task OnYearChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int year))
		{
			selectedYear = year;
		}
		else
		{
			selectedYear = null;
		}

		await LoadCreditDebitData();
	}

	//Amount Filter
	private async Task OnAmountChanged(ChangeEventArgs e)
	{
		selectedAmountFilter = e.Value?.ToString();
		await LoadCreditDebitData();
	}

	private async Task LoadCreditDebitData()
	{
		int? selectedPolicyHolderIdNullable = StateService.SelectedBankId;

		if (selectedPolicyHolderIdNullable.HasValue)
		{
			int selectedPolicyHolderId = selectedPolicyHolderIdNullable.Value;

			var allInsuredRecords = await CGLInsuredService.GetInsuredRecordsAsync();
			var allUndStatuses = await CGLUndStatusService.GetStatusAsync();
			var allCoverages = await CGLCoverageService.GetCoverageAsync();

			insuredDetailsList = (
				from insured in allInsuredRecords
				join status in allUndStatuses on insured.ID_Insured equals status.InsuredID
				join coverage in allCoverages on insured.ID_Insured equals coverage.ID_Insured
				where insured.Type == "Short Term"
					&& status.Und_Status == "For Refund"
					&& status.ExtendedAge == "Yes"
					&& insured.ID_Policy_Holder == selectedPolicyHolderId
				select new InsuredDetailView
					{
						Insured = insured,
						UndStatus = status,
						Coverage = coverage
					}
			).ToList();

			originalInsuredDetailsList = new List<InsuredDetailView>(insuredDetailsList);
		}
		else
		{
			insuredDetailsList = new List<InsuredDetailView>();
		}
		ApplyFilters();
		StateHasChanged();
	}

	private void ApplyFilters()
	{
		var filteredList = new List<InsuredDetailView>(originalInsuredDetailsList);

		// Filter by year
		if (selectedYear.HasValue)
		{
			filteredList = filteredList
				.Where(x => x.Insured?.Date_Of_Birth.Year == selectedYear.Value)
				.ToList();
		}

		// Filter by amount
		if (!string.IsNullOrEmpty(selectedAmountFilter))
		{
			filteredList = filteredList
				.Where(x =>
					(selectedAmountFilter == "Below100K" && x.Coverage?.Amount_Of_Insured < 100000) ||
					(selectedAmountFilter == "Above100K" && x.Coverage?.Amount_Of_Insured >= 100000) ||
					(selectedAmountFilter == "Above300K" && x.Coverage?.Amount_Of_Insured > 300000)
				).ToList();
		}

		// Filter by search text
		if (!string.IsNullOrEmpty(searchText))
		{
			var searchTerms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

			filteredList = filteredList
				.Where(x =>
					searchTerms.All(term =>
						(x.Insured?.First_Name != null && x.Insured.First_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
						(x.Insured?.Last_Name != null && x.Insured.Last_Name.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
						(x.Insured?.Middle_Name != null && x.Insured.Middle_Name.Contains(term, StringComparison.OrdinalIgnoreCase))
					)
				).ToList();
		}

		insuredDetailsList = filteredList;
	}

	private void CloseModal()
	{
		isModalVisible = false;
		showLoanHistoryModal = false;
	}
}